What happens when you initialize a repository? Why do you need to do it?

When initializing a repository, git creates the .git directory which contains
the metadata related to each file in the containing directory that might get
tracked for versioning. It is required for git to have the metadata it needs to
start versioning your files, and performing all other git operations on them
and the newly created repository.

How is the staging area different from the working directory and the repository? What value do you think it offers?

The staging area is an interediatry state containing all the changes I plan to
commit, whereas the repository holds the various versions of a collection of
files over time through commits, and a working directory contains the
actual source files reflected in the master branch. It is valuable to have
a staging area since, as we make changes, we can pick and choose which parts of
a change we want to add to a commit as we work through our new feature, and
change that as needed before making the final decision to commit those changes
to the repository.

How can you use the staging area to make sure you have one commit per logical change?

I can optionally choose which files from the working directory I want to add to
the staging area to only include those files related to the logical change
I want to make.

What are some situations when branches would be helpful in keeping your history organized? How would branches help?

Branches are quite helpful when I would like to test experimental changes, or
alternative versions of a project or resource that might not need to be part of
the main course or trajectory of a project. It might also be useful if we need
to create alternate versions of a project, or versions specific to a timeline
release / launch date.

How do the diagrams help you visualize the branch structure?

Diagrams are helpful in figuring out which branches were created from which
point in time relative to the master branch. This helps figure out what state
a new branch was in relative to master, or relative to another branch, before
additional commits were made within that branch. It also helps to determine the
reachability from a commit in one branch relative to other commits in the
master branch.

What is the result of merging two branches together? Why do we represent it in the diagram the way we do?

Merging two branches together takes all the commits from one branch since their
earliest common parent, and merges them into the other branch with all of its
commits since their earliest common parent as well. Once they've merged, the
first branch no longer exists as its own collection of commit changes as those
will now have all been merged into the second branch.
